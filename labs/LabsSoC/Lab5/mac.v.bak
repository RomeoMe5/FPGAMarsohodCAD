module mac
(
    input[7:0] Ain, Bin, 
    input clk,
    output[15:0] Pout
);
    wire[7:0] S_wire;
    wire Cout;

    my_sum summ1(Ain&Bin[0], Ain&Bin[1], 0, S_wire, Cout);
    my_sum summ2(Ain&Bin[2], S_wire>>1, 0, S_wire, Cout);
    my_sum summ3(Ain&Bin[3], S_wire>>1, 0, S_wire, Cout);
    my_sum summ4(Ain&Bin[4], S_wire>>1, 0, S_wire, Cout);
    my_sum summ5(Ain&Bin[5], S_wire>>1, 0, S_wire, Cout);
    my_sum summ6(Ain&Bin[6], S_wire>>1, 0, S_wire, Cout);
    my_sum summ7(Ain&Bin[7], S_wire>>1, 0, S_wire, Cout);
    assign Pout = S_wire << 1;
endmodule

module my_sum 
(
  input[7:0] Ain, Bin, 
  input Cin,
  output[7:0] Sout, 
  output Cout
);
    wire [7:0] C;

    bitsum sum1(Ain[0], Bin[0], Sout[0], Cin, C[0]);
    bitsum sum2(Ain[1], Bin[1], Sout[1], C[0], C[1]);    
    bitsum sum3(Ain[2], Bin[2], Sout[2], C[1], C[2]);
    bitsum sum4(Ain[3], Bin[3], Sout[3], C[2], C[3]);
    bitsum sum5(Ain[4], Bin[4], Sout[4], C[3], C[4]);
    bitsum sum6(Ain[5], Bin[5], Sout[5], C[4], C[5]);
    bitsum sum7(Ain[6], Bin[6], Sout[6], C[5], C[6]);
    bitsum sum8(Ain[7], Bin[7], Sout[7], C[6], C[7]);

    assign Cout = C[7];
endmodule


module bitsum 
(
    input A, B, Cin,
    output S, Cout
);
    wire Res;
    wire c1, c2;

    xor(Res, A, B);
    and(c1, A, B);
    xor(S, Cin, Res);
    and(c2, Cin, Res);
    or(Cout, c1, c2);
endmodule

