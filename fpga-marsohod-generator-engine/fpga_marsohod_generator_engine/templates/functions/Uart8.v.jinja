{#
	This template was created by HSE University students
	Dmitriy Pchelkin (hell03end) and Alexey Ivanov (DigiDon)
	and should be distribured without any warranty ("as is")
#}
{%- extends "BaseC_.jinja" -%}
{%- block message -%}
{%- include "licenses/_IntelLicense.jinja" -%}
{%- endblock message -%}
{%- block content -%}
{# verilog file content #}
/*
 * Simple 8-bit UART realization.
 * Combine receiver, transmitter and baud rate generator.
 * Able to operate 8 bits of serial data, one start bit, one stop bit.
 */
module Uart8  #(
	parameter CLOCK_RATE = {{ clock_rate }}, // board internal clock
	parameter BAUD_RATE = {{ baud_rate }}
)(
	input wire clk,

	// rx interface
	input wire rx,
	input wire rxEn,
	output wire [7:0] out,
	output wire rxDone,
	output wire rxBusy,
	output wire rxErr,

	// tx interface
	output wire tx,
	input wire txEn,
	input wire txStart,
	input wire [7:0] in,
	output wire txDone,
	output wire txBusy
);
wire rxClk;
wire txClk;

BaudRateGenerator #(
	.CLOCK_RATE(CLOCK_RATE),
	.BAUD_RATE(BAUD_RATE)
) generatorInst (
	.clk(clk),
	.rxClk(rxClk),
	.txClk(txClk)
);

Uart8Receiver rxInst (
	.clk(rxClk),
	.en(rxEn),
	.in(rx),
	.out(out),
	.done(rxDone),
	.busy(rxBusy),
	.err(rxErr)
);

Uart8Transmitter txInst (
	.clk(txClk),
	.en(txEn),
	.start(txStart),
	.in(in),
	.out(tx),
	.done(txDone),
	.busy(txBusy)
);

endmodule


/*
 * Baud rate generator to divide {CLOCK_RATE} (internal board clock) into
 * a rx/tx {BAUD_RATE} pair with rx oversamples by 16x.
 */
module BaudRateGenerator  #(
	parameter CLOCK_RATE = 100000000, // board internal clock (def == 100MHz)
	parameter BAUD_RATE = 9600
)(
	input wire clk, // board clock
	output reg rxClk, // baud rate for rx
	output reg txClk // baud rate for tx
);
parameter MAX_RATE_RX = CLOCK_RATE / (2 * BAUD_RATE * 16); // 16x oversample
parameter MAX_RATE_TX = CLOCK_RATE / (2 * BAUD_RATE);
parameter RX_CNT_WIDTH = $clog2(MAX_RATE_RX);
parameter TX_CNT_WIDTH = $clog2(MAX_RATE_TX);

reg [RX_CNT_WIDTH - 1:0] rxCounter = 0;
reg [TX_CNT_WIDTH - 1:0] txCounter = 0;

initial begin
	rxClk = 1'b0;
	txClk = 1'b0;
end

always @(posedge clk) begin
	// rx clock
	if (rxCounter == MAX_RATE_RX[RX_CNT_WIDTH-1:0]) begin
		rxCounter <= 0;
		rxClk <= ~rxClk;
	end else begin
		rxCounter <= rxCounter + 1'b1;
	end
	// tx clock
	if (txCounter == MAX_RATE_TX[TX_CNT_WIDTH-1:0]) begin
		txCounter <= 0;
		txClk <= ~txClk;
	end else begin
		txCounter <= txCounter + 1'b1;
	end
end

endmodule


/*
 * 8-bit UART Receiver.
 * Able to receive 8 bits of serial data, one start bit, one stop bit.
 * When receive is complete {done} is driven high for one clock cycle.
 * Output data should be taken away by a few clocks or can be lost.
 * When receive is in progress {busy} is driven high.
 * Clock should be decreased to baud rate.
 */
module Uart8Receiver  (
	input wire clk, // baud rate
	input wire en,
	input wire in, // rx
	output reg [7:0] out, // received data
	output reg done, // end on transaction
	output reg busy, // transaction is in process
	output reg err // error while receiving data
);
// states of state machine
reg [1:0] RESET = 2'b00;
reg [1:0] IDLE = 2'b01;
reg [1:0] DATA_BITS = 2'b10;
reg [1:0] STOP_BIT = 2'b11;

reg [2:0] state;
reg [2:0] bitIdx = 3'b0; // for 8-bit data
reg [1:0] inputSw = 2'b0; // shift reg for input signal state
reg [3:0] clockCount = 4'b0; // count clocks for 16x oversample
reg [7:0] receivedData = 8'b0; // temporary storage for input data

initial begin
	out <= 8'b0;
	err <= 1'b0;
	done <= 1'b0;
	busy <= 1'b0;
end

always @(posedge clk) begin
	inputSw = { inputSw[0], in };

	if (!en) begin
		state = RESET;
	end

	case (state)
		RESET: begin
			out <= 8'b0;
			err <= 1'b0;
			done <= 1'b0;
			busy <= 1'b0;
			bitIdx <= 3'b0;
			clockCount <= 4'b0;
			receivedData <= 8'b0;
			if (en) begin
				state <= IDLE;
			end
		end

		IDLE: begin
			done <= 1'b0;
			if (&clockCount) begin
				state <= DATA_BITS;
				out <= 8'b0;
				bitIdx <= 3'b0;
				clockCount <= 4'b0;
				receivedData <= 8'b0;
				busy <= 1'b1;
				err <= 1'b0;
			end else if (!(&inputSw) || |clockCount) begin
				// Check bit to make sure it's still low
				if (&inputSw) begin
					err <= 1'b1;
					state <= RESET;
				end
				clockCount <= clockCount + 4'b1;
			end
		end

		// Wait 8 full cycles to receive serial data
		DATA_BITS: begin
			if (&clockCount) begin // save one bit of received data
				clockCount <= 4'b0;
				// TODO check the most popular value
				receivedData[bitIdx] <= inputSw[0];
				if (&bitIdx) begin
					bitIdx <= 3'b0;
					state <= STOP_BIT;
				end else begin
					bitIdx <= bitIdx + 3'b1;
				end
			end else begin
				clockCount <= clockCount + 4'b1;
			end
		end

		/*
		 * Baud clock may not be running at exactly the same rate as the
		 * transmitter. Next start bit is allowed on at least half of stop bit.
		 */
		STOP_BIT: begin
			if (&clockCount || (clockCount >= 4'h8 && !(|inputSw))) begin
				state <= IDLE;
				done <= 1'b1;
				busy <= 1'b0;
				out <= receivedData;
				clockCount <= 4'b0;
			end else begin
				clockCount <= clockCount + 1;
				// Check bit to make sure it's still high
				if (!(|inputSw)) begin
					err <= 1'b1;
					state <= RESET;
				end
			end
		end

		default: state <= IDLE;
	endcase
end

endmodule


/*
 * 8-bit UART Transmitter.
 * This transmitter is able to transmit 8 bits of serial data,
 * one start bit, one stop bit and no parity bit.
 * When transmit is complete {done} will be driven high for one clock cycle.
 * When transmit is in progress, {busy} is driven high.
 * Clock should be decreased to baud rate.
 */
module Uart8Transmitter  (
	input wire clk, // baud rate
	input wire en,
	input wire start,
	input wire [7:0] in, // data to transmit
	output reg out, // tx
	output reg done, // end on transaction
	output reg busy // transaction is in process
);
// states of state machine
reg [2:0] RESET = 3'b000;
reg [2:0] IDLE = 3'b001;
reg [2:0] START_BIT = 3'b010;
reg [2:0] DATA_BITS = 3'b011;
reg [2:0] STOP_BIT = 3'b100;

reg [2:0] state;
reg [7:0] data = 8'b0; // to store a copy of input data
reg [2:0] bitIdx = 3'b0; // for 8-bit data

initial begin
	out <= 1'b1;
	done <= 1'b0;
	busy <= 1'b0;
end

always @(posedge clk) begin
	if (!en) begin
		state = RESET;
	end

	case (state)
		RESET: begin
			out <= 1'b1;
			done <= 1'b0;
			busy <= 1'b0;
			bitIdx <= 3'b0;
			data <= 8'b0;
			if (en) begin
				state <= IDLE;
			end
		end

		IDLE: begin
			out <= 1'b1; // drive line high for idle
			done <= 1'b0;
			if (start) begin
				data <= in; // save a copy of input data
				state <= START_BIT;
			end
		end

		// Send out start bit (low)
		START_BIT: begin
			out <= 1'b0;
			busy <= 1'b1;
			state <= DATA_BITS;
		end

		// Wait 8 clock cycles for data bits to be sent
		DATA_BITS: begin
			out <= data[bitIdx];
			if (&bitIdx) begin
				state <= STOP_BIT;
				bitIdx <= 3'b0;
			end else begin
				bitIdx = bitIdx + 1'b1;
			end
		end

		// Send out Stop bit (high)
		STOP_BIT: begin
			out <= 1'b1;
			done <= 1'b1;
			busy <= 1'b0;
			data <= 8'b0;
			state <= IDLE;
		end

		default: state <= IDLE;
	endcase
end

endmodule
{%- endblock content -%}
